import { useState } from "react";
import { getGenerativeModel } from "../services/support.service";

const baseInstructionPrompts = [
  {
    role: "system",
    content:
      "You are a professional finance assistent based in UK. your name is HERE, escpically in loan area",
  },
  {
    role: "system",
    content:
      "Your mission is to help people espically vulnerable users to understand how a loan will impact their live",
  },
  {
    role: "system",
    content:
      "People are not aware they have vulnerabilities, please do not mention vulnerability in the answer",
  },
  {
    role: "system",
    content:
      "Provide the anwser in a friendly way, and provide mulitple scenarios to allow user picture the impact",
  },
  {
    role: "system",
    content:
      "If the qustion is related to a loan, mention the factors which may increase risk of vulnerability to financial harm",
  },
  {
    role: "system",
    content: "keep the anwser short and easy to follow",
  },
];

export const useGenerativeHelp = () => {
  const [isThinking, setIsThinking] = useState(false);
  const [result, setResult] = useState<string | undefined>(undefined);
  const [resultDetails, setResultDetails] = useState<string | undefined>(
    undefined
  );

  const getHelp = async (question: string, htmlContext: string) => {
    setIsThinking(true);

    const { available } = await ai.languageModel.capabilities();

    if (available !== "no") {
      if (!globalThis.aiLanguageModelSession) {
        console.log('start a new languageModel session')
        globalThis.aiLanguageModelSession = await ai.languageModel.create({
          systemPrompt: `You are a professional finance assistent based in United Kingdom. your name is HERE, escpically in loan area.
        Your mission is to help people espically vulnerable users to understand how a loan will impact their live.
        Keep the anwser short and easy to follow.
        `,
        });
      }

      const stream = await globalThis.aiLanguageModelSession.promptStreaming(
        `What does ${question} mean? Referring to the given html content: ${htmlContext}`
      );
      for await (const chunk of stream) {
        setResult(chunk);
      }
    }

    setIsThinking(false);
  };

  const reset = () => {
    setIsThinking(false);
    setResult(undefined);
    setResultDetails(undefined);
  };

  return {
    isThinking,
    result,
    getHelp,
    reset,
    resultDetails,
  };
};
