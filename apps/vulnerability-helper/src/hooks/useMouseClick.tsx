import { useEffect, useState } from "react";
import hash from "object-hash";

type SelectedText = {
  text: string;
  counter: number;
};

const selectedText: SelectedText = {
  text: "",
  counter: 0,
};
type ActiveInput = {
  hash?: string;
  target?: HTMLInputElement;
  deleteCounter: number;
};

const activeInput: ActiveInput = {
  deleteCounter: 0,
};

const ElementType = {
  Input: "INPUT",
};

export const useMouseClick = () => {
  const [showToolTip, setShowToolTip] = useState<boolean>(false);
  const [targetElement, setTargetElement] = useState<Element | null>(null);

  const handleInputFocused = (target: HTMLInputElement) => {
    // const target = e.target as HTMLElement;
    const targetAttributes = target.attributes;
    const targetHash = hash(
      Object.fromEntries(
        Array.from(targetAttributes).map((item) => [item.name, item.value])
      )
    );

    if (activeInput.hash !== targetHash) {
      activeInput.deleteCounter = 0;
    }

    activeInput.hash = targetHash;
    activeInput.target = target;
  };

  const handleMouseClick = (e: MouseEvent) => {
    // const target = e.target as HTMLElement;
    let selection: Selection | null = null;
    if (window.getSelection) {
      selection = window.getSelection();
    } else if (document.getSelection()?.type != "Control") {
      selection = document.getSelection();
    }

    if (selection && selection.toString() !== "") {
      const hasSelectedSameText = selection.toString() === selectedText.text;
      selectedText.text = selection.toString();
      selectedText.counter = hasSelectedSameText ? selectedText.counter + 1 : 0;
    } else {
      selectedText.text = "";
      selectedText.counter = 0;
    }

    if (selectedText.counter >= 3) {
      console.log("show tooltip now!");
      setShowToolTip(true);
      setTargetElement(document.elementFromPoint(e.clientX, e.clientY));
    }

    if (
      e.target &&
      (e.target as HTMLInputElement).tagName === ElementType.Input
    ) {
      handleInputFocused(e.target as HTMLInputElement);
    }
  };

  const handleKeyUp = (e: KeyboardEvent) => {
    const key: string = e.keyCode.toString() || e.charCode.toString() || e.code;
    if (key === "8" || key === "46") {
      activeInput.deleteCounter = activeInput.deleteCounter + 1;
    }

    if (activeInput.deleteCounter >= 10) {
      console.log("show tooltip now!");
      setShowToolTip(true);

      let targetElement = activeInput.target as Element;
      let queryContent =
        activeInput.target?.value || activeInput.target?.placeholder || "Input";
      const ariaLabelBy = targetElement.getAttribute("aria-labelledby");

      console.log({ queryContent, ariaLabelBy });

      if (ariaLabelBy) {
        const labelRef = ariaLabelBy.split(" ")[0];
        const labelElement = document.getElementById(labelRef || '');
        console.log({ labelElement });
        if (labelElement) {
          targetElement = labelElement;
          queryContent = labelElement.textContent || "Input";
        }
      }

      setTargetElement(targetElement);
      selectedText.text = queryContent;
    }
  };

  useEffect(() => {
    if (showToolTip) {
      document.body.removeEventListener("click", handleMouseClick);
      document.body.removeEventListener("keyup", handleKeyUp);
    } else {
      document.body.addEventListener("click", handleMouseClick);
      document.body.addEventListener("keyup", handleKeyUp);
    }
    return () => {
      document.body.removeEventListener("click", handleMouseClick);
      document.body.removeEventListener("keyup", handleKeyUp);
    };
  }, [showToolTip]);

  const reset = () => {
    setShowToolTip(false);
    selectedText.text = "";
    selectedText.counter = 0;

    activeInput.deleteCounter = 0;
    activeInput.hash = undefined;
    activeInput.target = undefined;
  };

  return {
    showToolTip,
    reset,
    targetElement,
    selectedText,
  };
};
