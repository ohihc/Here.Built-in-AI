import Backdrop from "@mui/material/Backdrop";
import { useMouseClick } from "./hooks/useMouseClick";

import "./App.css";
import { styled } from "@mui/material/styles";
import Tooltip, { TooltipProps, tooltipClasses } from "@mui/material/Tooltip";
import { Fragment } from "react/jsx-runtime";
import Typography from "@mui/material/Typography";
import { useState } from "react";
import { useGenerativeHelp } from "./hooks/useGenerativeHelp";
import { motion } from "framer-motion";
import Grow from "@mui/material/Grow";
import Markdown from "react-markdown";
import { SkeletonGroup } from "./components/SkeletonGroup/SkeletonGroup";
import sanitizeHtml from "./utils/sanitise-html";
import { useTheme } from "@mui/material/styles";
import Button from "@mui/material/Button";
import { SearchInput } from "./components/SearchInput/SearchInput";
import Divider from "@mui/material/Divider";

const HtmlTooltip = styled(({ className, ...props }: TooltipProps) => (
  <Tooltip {...props} arrow classes={{ popper: className }} />
))(({ theme, className }) => ({
  // margin: "0 8px 16px 0!important",
  zIndex: 9999999999,
  [`& .${tooltipClasses.arrow}`]: {
    display: "none",
  },
  [`& .${tooltipClasses.tooltip}`]: {
    backgroundColor: theme.palette.primary.main,
    width: className && className.includes("expended") ? "70vw" : 300,
    maxWidth: "70vw",
    // maxHeight: className && className.includes("expended") ? 300 : "auto",
    // overflowY:
    //   className && className.includes("expended") ? "scroll" : "hidden",
    borderRadius:
      className && className.includes("expended")
        ? "0 8px 8px 8px"
        : "0 16px 16px 16px",
    padding: 16,
    // transition:
    //   "all 300ms cubic-bezier(0.4, 0, 0.2, 1), transform 200ms cubic-bezier(0.4, 0, 0.2, 1) !important",
    boxShadow: "rgba(0, 0, 0, 0.15) 0px 5px 15px 0px",
    minWidth: className && className.includes("expended") ? "70vw" : 300,
  },
}));

const ResultWrapper = styled("div")(() => ({
  ["& h2"]: {
    fontSize: 18,
    fontWeight: 700,
  },
  ["& p, & li"]: {
    fontSize: 16,
    fontWeight: 400,
    lineHeight: 1.5,
  },
  ["& li"]: {
    marginBottom: 8,
  },
}));

const ReadMoreButton = styled(Button)(({ theme }) => ({
  color: theme.palette.common.white,
  // borderColor: theme.palette.primary.light,
  borderColor: theme.palette.primary.dark,
  background: theme.palette.primary.dark,
  boxShadow:
    "rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px",
  // backgroundColor: theme.palette.common.white,
  fontSize: 16,
  fontWeight: 700,
  textTransform: "capitalize",
  [`&:hover`]: {
    borderColor: theme.palette.primary.dark,
    background: "#0D47A1",
    boxShadow: "rgba(0, 0, 0, 0.15) 0px 5px 15px 0px",
  },
}));

const ResultDetailsWrapper = styled("div")(() => ({
  animation: "fadeIn .3s linear",
  "@keyframes fadeIn": {
    "0%": { opacity: 0 },
    "100%": { opacity: 1 },
  },
}));

const ToolTipTypography = styled(Typography)(({ theme }) => ({
  color: theme.palette.common.white,
  marginBottom: "8px",
  fontSize: "22px",
  fontWeight: 700,
}));

const markdownComponents: Partial<{
  [TagName in keyof JSX.IntrinsicElements]:  // Class component:
    | (new (props: JSX.IntrinsicElements[TagName]) => JSX.ElementClass)
    // Function component:
    | ((
        props: JSX.IntrinsicElements[TagName]
      ) => JSX.Element | string | null | undefined)
    // Tag name:
    | keyof JSX.IntrinsicElements;
}> = {
  h1(props) {
    const { children } = props;
    return <ToolTipTypography variant="h4">{children}</ToolTipTypography>;
  },
  h2(props) {
    const { children } = props;
    return <ToolTipTypography variant="h4">{children}</ToolTipTypography>;
  },
  h3(props) {
    const { children } = props;
    return <ToolTipTypography variant="h4" sx={{fontSize: '18px'}}>{children}</ToolTipTypography>;
  },
  h4(props) {
    const { children } = props;
    return <ToolTipTypography variant="h4" sx={{fontSize: '18px'}}>{children}</ToolTipTypography>;
  },
  p(props) {
    const { children } = props;
    return <ToolTipTypography variant="body1">{children}</ToolTipTypography>;
  },
  li(props) {
    const { children } = props;
    return children ? <li style={{ lineHeight: 2 }}>{children}</li> : <></>;
  },
  strong(props) {
    const { children } = props;
    return <strong style={{ display: "block" }}>{children}</strong>;
  },
  hr() {
    return <Divider variant="inset" sx={{ borderColor: "rgba(0,0,0,.3)" }} />;
  },
};

function App() {
  const {
    showToolTip,
    targetElement,
    reset: resetMouseClick,
    selectedText,
  } = useMouseClick();

  const {
    isThinking,
    result,
    reset: resetGenerativeHelp,
    getHelp,
    resultDetails,
  } = useGenerativeHelp();

  const [showDetails, setShowDetails] = useState(false);
  const [showExtraDetails, setShowExtraDetails] = useState(false);

  const theme = useTheme();

  if (showToolTip) {
    return (
      <Backdrop
        onClick={() => {
          resetMouseClick();
          resetGenerativeHelp();
          setShowDetails(false);
          setShowExtraDetails(false);
        }}
        open={true}
        sx={() => ({ zIndex: 999999999 })}
      >
        <div onClick={(e) => e.stopPropagation()}>
          <HtmlTooltip
            open={true}
            arrow={false}
            className={`${showExtraDetails ? "expended" : ""} `}
            // placement="bottom-start"
            title={
              <Fragment>
                {isThinking && (
                  <>
                    <Typography variant="body1">
                      {`It looks like you need some help on "${selectedText.text}", I am here to help`}
                    </Typography>
                    <SkeletonGroup />
                  </>
                )}
                {/* <Fade in={!isThinking && !!result} timeout={600}> */}
                {!isThinking && !!result && (
                  <ResultWrapper>
                    <ResultDetailsWrapper>
                      <Markdown components={markdownComponents}>
                        {result}
                      </Markdown>
                    </ResultDetailsWrapper>
                    {result && (
                      <>
                        <ReadMoreButton
                          startIcon={<>âœ¨</>}
                          variant="outlined"
                          onClick={() => setShowExtraDetails(true)}
                        >
                          What does it mean to me
                        </ReadMoreButton>
                      </>
                    )}
                    {showExtraDetails && !!resultDetails && (
                      <div>
                        <div
                          style={{
                            height: 250,
                            overflowY: "scroll",
                            marginBottom: "24px",
                            background: theme.palette.primary.dark,
                            color: theme.palette.common.white,
                            // background: theme.palette.common.white,
                            // color: theme.palette.common.black,
                            padding: "16px",
                            borderRadius: "8px",
                          }}
                        >
                          <ResultDetailsWrapper>
                            <Markdown components={markdownComponents}>
                              {resultDetails}
                            </Markdown>
                          </ResultDetailsWrapper>
                        </div>
                        <SearchInput
                          onClick={() => {
                            const params = {
                              question: selectedText,
                              result: `${result}\n\n${resultDetails}`,
                              context: sanitizeHtml(document.body.innerHTML),
                            };
                            if (chrome) {
                              console.log("opening chat...");
                              chrome.storage.local.set({ params });
                              window.open(
                                chrome.runtime.getURL("apps/chat/index.html"),
                                "_blank"
                              );
                            }
                          }}
                        />
                      </div>
                    )}
                  </ResultWrapper>
                )}
                {/* </Fade> */}
              </Fragment>
            }
            // placement={showExtraDetails ? undefined : "bottom-start"}
            TransitionComponent={Grow}
            TransitionProps={{
              in: showDetails,
              timeout: 300,
            }}
            PopperProps={{
              modifiers: [
                {
                  name: "flip",
                  enabled: true,
                  options: {
                    altBoundary: true,
                    rootBoundary: "viewport",
                    padding: 16,
                  },
                },
              ],
            }}
          >
            <motion.div
              className="help-panel"
              style={{
                left: targetElement?.getBoundingClientRect().left,
                top: targetElement?.getBoundingClientRect().top,
              }}
              initial={{
                opacity: 0,
                scale: 0,
              }}
              animate={{
                opacity: 1,
                scale: 1,
              }}
              onAnimationComplete={() => {
                getHelp(
                  targetElement?.innerHTML || "",
                  sanitizeHtml(document.body.innerHTML)
                );
                setShowDetails(true);
              }}
            >
              <Typography variant="h6">"{selectedText.text}"</Typography>
            </motion.div>
          </HtmlTooltip>
        </div>
      </Backdrop>
    );
  }

  return <></>;
}

export default App;
